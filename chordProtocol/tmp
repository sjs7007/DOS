import akka.actor._
import scala.math._ //for absolute value
import scala.collection.mutable.ListBuffer //for storing neighbor list : https://www.cs.helsinki.fi/u/wikla/OTS/Sisalto/examples/html/ch17.html
import scala.util._ //for random number
import scala.concurrent.Await
import akka.pattern.ask
import akka.util.Timeout
import scala.concurrent.duration._


object Chord extends App {
  val system = ActorSystem("Chord")

  val tmp = system.actorOf(Props(new Node(2, null))) 
  
  implicit val timeout = Timeout(1 seconds)   
  val future = tmp ? getPredecessor("abc") // enabled by the “ask” import

  val result = Await.result(future, timeout.duration).asInstanceOf[ActorRef]
  println (result)

  val result2 = Await.result(tmp?getSuccessor("abc"),timeout.duration).asInstanceOf[ActorRef]
  println(result2)

}

case class getPredecessor(thing: String)
case class getSuccessor(thing: String)

class Node(id: Int , source: ActorRef) extends Actor {
   def receive = {
   
   case getPredecessor(th) => sender ! self

   case getSuccessor(th) =>
     implicit val timeout = Timeout(1 seconds)   

     
   //  val tmp = Await.result(self ? getPredecessor(th),timeout.duration).asInstanceOf[ActorRef]
    val tmp=self 
    sender ! tmp

   }
}
